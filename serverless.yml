service: graphql-api

custom:
  deploymentBuckets: ${file(./serverless/deployment-buckets.yml)}
  dynamoDBDeletePolicies:
    prod: Retain # prevent dropping prod dynamodb tables if someone `sls remove -s prod`
    # add other stages that may need Retain
  dynamoDBDeletePolicy: ${self:custom.dynamoDBDeletePolicies.${self:provider.stage}, 'Delete'}

provider:
  name: aws
  profile: ${self:provider.stage}-profile
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: ${opt:region, 'us-west-2'}
  deploymentBucket:
    name: ${self:custom.deploymentBuckets.${self:provider.stage}, self:custom.deploymentBuckets.default}
    serverSideEncryption: AES256
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  query:
    handler: handler.query
    events:
      - http:
          path: query
          method: get

resources:
  Resources:
    NicknamesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.dynamoDBDeletePolicy}
      Properties:
        AttributeDefinitions:
          - AttributeName: firstName
            AttributeType: S
        KeySchema:
          - AttributeName: firstName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
